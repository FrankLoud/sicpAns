#Codes

    (define (xysqrt in)
      (sqrt-iter 1.0 in))
    
    (define (sqrt-iter guess x)
      (if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
    
    (define (improve g b)
      (/ (+ g
            (/ b g))
         2.0))
    
    (define (good-enough? c d)
      (< (abs (- (square c)
                 d))
         0.001))
    
    (define (square x)
      (* x x))
  
    ;num 表示初始值，test-times表示进行test-times次测试,每次测试将num平方作为新的num
    ;每进行一次测试，先显示num的平方，然后显示num，最后显示xysqrt对num的平方进行的开方操作
    (define (sqrt-test num test-times)
      (begin (display (* num num)) (newline) (display num) (newline) (display (xysqrt (* num num))) (newline) (newline)
             (if (> test-times 0)
               (sqrt-test (* num num) (- test-times 1))
               num)))
   
# Running
## Test of very small numbers
    1 ]=> (load "1007.scm")
    
    ;Loading "1007.scm"... done
    ;Value: sqrt-test
    
    1 ]=> (sqrt-test 0.1 5)
    1.0000000000000002e-2
    .1
    .10032578510960607
    
    1.0000000000000005e-4
    1.0000000000000002e-2
    .03230844833048122
    
    1.0000000000000008e-8
    1.0000000000000005e-4
    .03125010656242753
    
    1.0000000000000017e-16
    1.0000000000000008e-8
    .03125000000000106
    
    1.0000000000000035e-32
    1.0000000000000017e-16
    .03125
    
    1.0000000000000069e-64
    1.0000000000000035e-32
    .03125
    
    ;Value: 1.0000000000000035e-32

## Test of very large numbers
    1 ]=> (sqrt-test 5 5)
    25
    5
    5.000023178253949
    
    625
    25
    25.000000063076968
    
    390625
    625
    625.0000000051539
    
    152587890625
    390625
    390625.
    
    23283064365386962890625
    152587890625
    152587890625.
    
    542101086242752217003726400434970855712890625
    23283064365386962890625
    ^C
    Interrupt option (? for help): ;Quit!
 
# Analyzing
## Test of very small numbers
发现当要计算的平方根 小于0.01之后，所计算出的平方根都是0.03+，这是因为虽然计算的平方根相对于原数误差很大但是误差小于`good-enough?`中设定的0.01（注意这里是平方时的误差，见下面的计算）

    1 ]=> (- 0.0001 (* 0.032 0.032))
    ;Value: -9.239999999999999e-4

## Test of very large numbers
发现计算5的8次方开始，后面的小数位丢失了；计算5的32次方时，程序计算时间过长。可能的原因是由于精度限制，计算的结果的小数位被省略，导致平方后的误差始终大于0.001，因此程序无法停止。
### Codes:1007_big_number.scm
每次递归的输出依次为：递归深度、当前计算的平方根、计算出的平方根的平方与输入的原平方数的差值。
    (define (xysqrt in count)
      (sqrt-iter 1.0 in count))
    
    (define (sqrt-iter guess x count)
      (begin (display count) (newline) (display guess) (newline) (display (- (square guess) x)) (newline) (newline)
             (if (good-enough? guess x)
                     guess
                     (sqrt-iter (improve guess x) x (+ count 1)))))
    
    (define (improve g b)
      (/ (+ g
            (/ b g))
         2.0))
    
    (define (good-enough? c d)
      (< (abs (- (square c)
                 d))
         0.001))
    
    (define (square x)
      (* x x))

### Running
使用上面的代码测试了5的32次方的计算，发现由于精度的限制，大数使用科学计算法时，计算出来的平方根的底数的小数位最长为16位，而指数稳定在22位，平方后是44位，这样计算出的平方根的后，低位的约28（44-16）位都为0，但输入的低位的28位的最高为是7，这样导致误差始终至少约为7*10^27，所以递归无法停止，并且误差不能无限减小。从运行结果也可以看出，平方根和误差在一定次数的递归后都不再变化。

    1 ]=> (load "1007_big_number.scm")
    
    ;Loading "1007_big_number.scm"... done
    ;Value: square
    
    1 ]=> (xysqrt 542101086242752217003726400434970855712890625 1)
    1
    1.
    -5.421010862427522e44
    
    2
    2.710505431213761e44
    7.346839692639297e88
    
    3
    1.3552527156068806e44
    1.8367099231598244e88
    
    4
    6.776263578034403e43
    4.591774807899561e87
    
    5
    3.3881317890172014e43
    1.1479437019748902e87
    
    6
    1.6940658945086007e43
    2.8698592549372256e86
    
    7
    8.470329472543004e42
    7.174648137343064e85
    
    8
    4.235164736271502e42
    1.793662034335766e85
    
    9
    2.117582368135751e42
    4.484155085839415e84
    
    10
    1.0587911840678754e42
    1.1210387714598537e84
    
    11
    5.293955920339377e41
    2.8025969286496344e83
    
    12
    2.6469779601696886e41
    7.006492321624086e82
    
    13
    1.3234889800848443e41
    1.7516230804060215e82
    
    14
    6.617444900424222e40
    4.379057701015054e81
    
    15
    3.308722450212111e40
    1.0947644252537634e81
    
    16
    1.6543612251060554e40
    2.7369110631344085e80
    
    17
    8.271806125530277e39
    6.842277657836021e79
    
    18
    4.1359030627651385e39
    1.7105694144590053e79
    
    19
    2.0679515313825692e39
    4.276423536147513e78
    
    20
    1.0339757656912846e39
    1.0691058840368783e78
    
    21
    5.169878828456423e38
    2.672764710092196e77
    
    22
    2.5849394142282115e38
    6.68191177523049e76
    
    23
    1.2924697071141058e38
    1.6704779438076224e76
    
    24
    6.462348535570529e37
    4.176194859519056e75
    
    25
    3.2311742677852644e37
    1.044048714879764e75
    
    26
    1.6155871338926322e37
    2.61012178719941e74
    
    27
    8.077935669463161e36
    6.525304467998525e73
    
    28
    4.0389678347315805e36
    1.6313261169996313e73
    
    29
    2.0194839173657903e36
    4.078315292499078e72
    
    30
    1.0097419586828951e36
    1.0195788231247695e72
    
    31
    5.048709793414476e35
    2.548947057811924e71
    
    32
    2.524354896707238e35
    6.37236764452981e70
    
    33
    1.262177448353619e35
    1.5930919111324524e70
    
    34
    6.310887241768095e34
    3.982729777831131e69
    
    35
    3.1554436208840473e34
    9.956824444577827e68
    
    36
    1.5777218104420236e34
    2.489206111144457e68
    
    37
    7.888609052210118e33
    6.223015277861142e67
    
    38
    3.944304526105059e33
    1.5557538194652855e67
    
    39
    1.9721522630525296e33
    3.889384548663214e66
    
    40
    9.860761315262648e32
    9.723461371658035e65
    
    41
    4.930380657631324e32
    2.4308653429145087e65
    
    42
    2.465190328815662e32
    6.077163357286272e64
    
    43
    1.232595164407831e32
    1.519290839321568e64
    
    44
    6.162975822039155e31
    3.79822709830392e63
    
    45
    3.0814879110195774e31
    9.4955677457598e62
    
    46
    1.5407439555097887e31
    2.37389193643995e62
    
    47
    7.703719777548944e30
    5.934729841099875e61
    
    48
    3.851859888774472e30
    1.4836824602749687e61
    
    49
    1.925929944387236e30
    3.709206150687421e60
    
    50
    9.629649721936181e29
    9.27301537671855e59
    
    51
    4.814824860968093e29
    2.3182538441796363e59
    
    52
    2.4074124304840523e29
    5.795634610449077e58
    
    53
    1.2037062152420374e29
    1.448908652612256e58
    
    54
    6.018531076210412e28
    3.622271631530504e57
    
    55
    3.0092655381056564e28
    9.055679078824905e56
    
    56
    1.504632769053729e28
    2.263919769704871e56
    
    57
    7.523163845286659e27
    5.659799424248625e55
    
    58
    3.7615819226793583e27
    1.4149498560486038e55
    
    59
    1.8807909614117368e27
    3.537374639985984e54
    
    60
    9.403954808499836e26
    8.843436598609707e53
    
    61
    4.7019774071322216e26
    2.2108591482971744e53
    
    62
    2.3509887093307183e26
    5.527147857190408e52
    
    63
    1.1754943661945742e26
    1.381786950745075e52
    
    64
    5.8774720615571685e25
    3.4544672413374215e51
    
    65
    2.938736491947162e25
    8.63616674809105e50
    
    66
    1.4693691683105916e25
    2.1590403317708976e50
    
    67
    7.346864288281593e24
    5.397587276934115e49
    
    68
    3.673469037505433e24
    1.3493832668424849e49
    
    69
    1.8368083047409347e24
    3.373322647279023e48
    
    70
    9.185517184188251e23
    8.431951583239338e47
    
    71
    4.595709438929271e23
    2.106633513843932e47
    
    72
    2.3037526237321544e23
    5.25306604272851e46
    
    73
    1.1636419216077285e23
    1.2998524130986515e46
    
    74
    6.051142555956919e22
    3.119531537008531e45
    
    75
    3.473504111513419e22
    6.6442199502731056e44
    
    76
    2.5170895317451237e22
    9.147288483933644e43
    
    77
    2.3353858543715235e22
    3.3016226371088543e42
    
    78
    2.3283171667049252e22
    4.996634532827666e39
    
    79
    2.3283064365634214e22
    1.1513515804735408e34
    
    80
    2.3283064365386964e22
    7.922816251426434e28
    
    81
    2.3283064365386964e22
    7.922816251426434e28
    
    82
    2.3283064365386964e22
    7.922816251426434e28
    
    83
    2.3283064365386964e22
    7.922816251426434e28
    
    84
    2.3283064365386964e22
    7.922816251426434e28
    
    85
    2.3283064365386964e22
    7.922816251426434e28
    
    86
    2.3283064365386964e22
    7.922816251426434e28
    
    87
    2.3283064365386964e22
    7.922816251426434e28
    
    88
    2.3283064365386964e22
    7.922816251426434e28
    
    89
    2.3283064365386964e22
    7.922816251426434e28
    
    90
    2.3283064365386964e22
    7.922816251426434e28
        
# Test of new `good-enough?`
## Codes

    ;1007_b.scm

    (define (xysqrt in) (sqrt-iter 1.0 in in))
    
    (define (sqrt-iter guess pre-guess x)
      (if (good-enough? guess pre-guess)
          guess
          (sqrt-iter (improve guess x) guess x)))
    
    (define (improve g b)
      (/ (+ g
            (/ b g))
         2.0))
    
    (define (good-enough? guess pre-guess)
      (< (/ (abs (- guess pre-guess))
            pre-guess)
         0.0001))
    
    (define (sqrt-test num test-times)
      (begin (display (* num num)) (newline) (display num) (newline) (display (xysqrt (* num num))) (newline) (newline)
             (if (> test-times 0)
               (sqrt-test (* num num) (- test-times 1))
               (display test-times))))

## Running
### Test of very small numbers

    1 ]=> (load "1007_b.scm")
    
    ;Loading "1007_b.scm"... done
    ;Value: sqrt-test
    
    1 ]=> (sqrt-test 0.1 5)
    1.0000000000000002e-2
    .1
    .10000000000139897
    
    1.0000000000000005e-4
    1.0000000000000002e-2
    1.0000000025490747e-2
    
    1.0000000000000008e-8
    1.0000000000000005e-4
    1.0000000000082468e-4
    
    1.0000000000000017e-16
    1.0000000000000008e-8
    1.0000000009432513e-8
    
    1.0000000000000035e-32
    1.0000000000000017e-16
    1.0000000000006089e-16
    
    1.0000000000000069e-64
    1.0000000000000035e-32
    1.0000000000106228e-32
    
使用变化率来作为判断是否达到计算精度的条件，对于小数字的计算结果还是不错的。
### Test of very large numbers

    1 ]=> (sqrt-test 625 5)
    390625
    625
    625.0000000051539
    
    152587890625
    390625
    390625.0003684572
    
    23283064365386962890625
    152587890625
    152587890625.09265
    
    542101086242752217003726400434970855712890625
    23283064365386962890625
    2.3283064365634214e22
    
    293873587705571876992184134305561419454666389193021880377187926569604314863681793212890625
    542101086242752217003726400434970855712890625
    5.421010870150786e44
    
    86361685550944446253863518628003995711160003644362813850237034701685918031624270579715075034722882265605472939461496635969950989468319466936530037770580747746862471103668212890625
    293873587705571876992184134305561419454666389193021880377187926569604314863681793212890625
    2.9387358770610597e89
    
使用变化率来作为判断是否达到计算精度的条件，对于大数的计算结果还是不错的。
