# Question
Exercise 1.15.  The sine of an angle (specified in radians) can be computed by making use of the approximation sin x  x if x is sufficiently small, and the trigonometric identity to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered ``sufficiently small'' if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in the following procedures:
```scheme
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
   (if (not (> (abs angle) 0.1))
          angle
                 (p (sine (/ angle 3.0)))))
```

a.  How many times is the procedure p applied when (sine 12.15) is evaluated?

b.  What is the order of growth in space and number of steps (as a function of a) used by the process generated by the sine procedure when (sine a) is evaluated?

# Answer
## Question a
### Codes
```scheme
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (begin (display angle) (newline)
             (p (sine (/ angle 3.0))))))
```
### Running
```
1 ]=> (load "1015_sine.scm")

;Loading "1015_sine.scm"... done
;Value: sine

1 ]=> (sine 12.15)
12.15
4.05
1.3499999999999999
.44999999999999996
.15
;Value: -.39980345741334
```
Each time running the (sine angle) and fails the if, it's reduced to (p (sine (/ angle 3.0))), using the application order, procedure p is defered and (sine (/ angle 3.0)) is evaluated. So the process is a linear recursion, and the times p is applied is the same as the steps for angle to go down under 0.1. When angle is 12.15, the answer is 5.

## Question b
### Order of growth in space 
space = theta(log(n)) because it is a linear recursion and the question go down 3 times each iteration.

### Order of growth of steps
steps = theta(log(n)) because it is a linear recursion and the question go down 3 times each iteration.

