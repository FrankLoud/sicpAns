# Summary
We concentrated in chapter 1 on **computational processes** and on the role of **procedures** in program design. We saw how to use **primitive data (numbers) and primitive operations (arithmetic operations)**, how to **combine procedures** to form compound procedures through composition, conditionals, and the use of parameters, and how to **abstract procedures** by using define. We saw that a procedure can be regarded as a pattern for the local evolution of a process, and we classified, reasoned about, and performed simple algorithmic analyses of some **common patterns for processes** as embodied in procedures. We also saw that **higher-order procedures** enhance the power of our language by enabling us to manipulate, and thereby to reason in terms of, general methods of computation. This is much of **the essence of programming**. -- SICP, Chapter 2
